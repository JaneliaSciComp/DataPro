//	DataPro//	DAC/ADC macros for use with Igor Pro and the ITC-16 or ITC-18//	Nelson Spruston//	Northwestern University//	project began 10/27/1998#pragma rtGlobals=1		// Use modern global access method.Function HandleADCChannelModePopupMenu(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	Variable iChannel		iChannel=str2num(ctrlName[strlen(ctrlName)-1])	SwitchADCChannelMode(iChannel,popNum-1)  // notify the model	ADCChannelModeChanged(iChannel)  // notify the viewEndFunction HandleDACChannelModePopupMenu(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	Variable iChannel		iChannel=str2num(ctrlName[strlen(ctrlName)-1])	SwitchDACChannelMode(iChannel,popNum-1)  // notify the model	DACChannelModeChanged(iChannel)  // notify the viewEndFunction LoadSettingsButtonPressed(ctrlName) : ButtonControl	String ctrlName	// Change to the Digitizer data folder	String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer	// Declare the DF vars we need	WAVE adcChannelOn	WAVE /T adcBaseName	WAVE adcMode	WAVE adcGainAll	WAVE dacChannelOn	WAVE dacMode	WAVE dacGainAll	WAVE dacMultiplier	WAVE /T dacWavePopupSelection	WAVE ttlOutputChannelOn	WAVE /T ttlWavePopupSelection	NVAR nChannelModes	NVAR nADCChannels	NVAR nDACChannels	NVAR nTTLChannels	// Prompt user for a filename	String fileFilters="DataPro Digitizer Settings Files (*.dds):.dds;"	fileFilters += "All Files:.*;"	Variable settingsFile	Open /D /R /F=fileFilters settingsFile	// Doesn't actually open, just brings up file chooser	String fileNameAbs=S_fileName	Variable userCancelled=( strlen(fileNameAbs)==0 )	if (!userCancelled)		// Actually open the file		Open /Z /R settingsFile as fileNameAbs		Variable fileOpenedSuccessfully=(V_flag==0)		if (fileOpenedSuccessfully)			// Read the ADC settings from the file, set in model			String oneLine			Variable i,j			for (i=0; i<nADCChannels; i+=1)				FReadLine settingsFile, oneLine				adcChannelOn[i]=str2num(oneLine)				FReadLine settingsFile, oneLine				adcBaseName[i]=oneLine[0,strlen(oneLine)-2]				FReadLine settingsFile, oneLine				adcMode[i]=str2num(oneLine)				for (j=0; j<nChannelModes; j+=1)					FReadLine settingsFile, oneLine					adcGainAll[i][j]=str2num(oneLine)				endfor			endfor			// Read the DAC settings from the file, set in model			for (i=0; i<nDACChannels; i+=1)				FReadLine settingsFile, oneLine				dacChannelOn[i]=str2num(oneLine)				FReadLine settingsFile, oneLine				dacMode[i]=str2num(oneLine)				for (j=0; j<nChannelModes; j+=1)					FReadLine settingsFile, oneLine					dacGainAll[i][j]=str2num(oneLine)				endfor				FReadLine settingsFile, oneLine				String dacWaveNameInFile=oneLine[0,strlen(oneLine)-2]				String listOfDACWaveNames="(none);"+Wavelist("*_DAC",";","")				if ( IsItemInList(dacWaveNameInFile,listOfDACWaveNames) )					dacWavePopupSelection[i]=dacWaveNameInFile				endif							FReadLine settingsFile, oneLine				dacMultiplier[i]=str2num(oneLine)			endfor			// Read the TTL output settings from the file, set in model			for (i=0; i<nTTLChannels; i+=1)				FReadLine settingsFile, oneLine				ttlOutputChannelOn[i]=str2num(oneLine)				FReadLine settingsFile, oneLine				String ttlWaveNameInFile=oneLine[0,strlen(oneLine)-2]				String listOfTTLWaveNames="(none);"+Wavelist("*_TTL",";","")				if ( IsItemInList(ttlWaveNameInFile,listOfTTLWaveNames) )					ttlWavePopupSelection[i]=ttlWaveNameInFile				endif						endfor			// Close the file			Close settingsFile			// Do some housekeeping on the model			//SyncGainsToChannelTypes()			// Notify the view that the model has changed			DigitizerModelChanged()		endif	endif		// Restore the original DF	SetDataFolder savedDF	EndFunction SaveSettingsButtonPressed(ctrlName) : ButtonControl	String ctrlName	// Change to the Digitizer data folder	String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer	// Declare the DF vars we need	WAVE adcChannelOn	WAVE adcGainAll	WAVE /T adcBaseName	WAVE dacChannelOn	WAVE dacGainAll	WAVE /T dacWavePopupSelection	WAVE ttlOutputChannelOn	WAVE /T ttlWavePopupSelection	WAVE adcMode, dacMode	WAVE dacMultiplier	NVAR nChannelModes	NVAR nADCChannels	NVAR nDACChannels	NVAR nTTLChannels	// Prompt user for a filename	String fileFilters="DataPro Digitizer Settings Files (*.dds):.dds;"	fileFilters += "All Files:.*;"	Variable settingsFile	Open /D  /F=fileFilters settingsFile		// Doesn't actually open, just brings up file chooser	String fileNameAbs=S_fileName	Variable userCancelled=( strlen(fileNameAbs)==0 )	if (!userCancelled)		// Actually open the file		Open /Z settingsFile as fileNameAbs		Variable fileOpenedSuccessfully=(V_flag==0)		if (fileOpenedSuccessfully)			// Save the ADC parameters			Variable i,j			for (i=0;i<nADCChannels;i+=1)				fprintf settingsFile, "%d\r", adcChannelOn[i]				fprintf settingsFile, "%s\r", adcBaseName[i]				fprintf settingsFile, "%d\r", adcMode[i]				for (j=0; j<nChannelModes; j+=1)					fprintf settingsFile, "%g\r", adcGainAll[i][j]				endfor			endfor						// Save the DAC parameters			String controlName			for (i=0;i<nDACChannels;i+=1)				fprintf settingsFile, "%d\r", dacChannelOn[i]				fprintf settingsFile, "%d\r", dacMode[i]				for (j=0; j<nChannelModes; j+=1)					fprintf settingsFile, "%g\r", dacGainAll[i][j]				endfor				fprintf settingsFile, "%s\r", dacWavePopupSelection[i]				fprintf settingsFile, "%g\r", dacMultiplier[i]					endfor						// Save the TTL output parameters			for (i=0;i<nTTLChannels;i+=1)				fprintf settingsFile, "%d\r", ttlOutputChannelOn[i]				fprintf settingsFile, "%s\r", ttlWavePopupSelection[i]			endfor						// Close the file			Close settingsFile		else			// unable to open the file			DoAlert /T="Unable to open file" 0, "Unable to open file."		endif	endif		// Restore the original DF	SetDataFolder savedDFEndFunction HandleADCGainSetVariable(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer	WAVE adcMode	WAVE adcGainAll		Variable i=str2num(ctrlName[7])  // ADC channel index	adcGainAll[i][adcMode[i]]=varNum		SetDataFolder savedDFEndFunction HandleDACGainSetVariable(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer		WAVE dacMode	WAVE dacGainAll	Variable i=str2num(ctrlName[7])  // DAC channel index	dacGainAll[i][dacMode[i]]=varNum		SetDataFolder savedDFEndFunction HandleDACMultiplierSetVariable(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer		WAVE dacMultiplier	Variable i=str2num(ctrlName[13])  // DAC channel index	dacMultiplier[i]=varNum			SetDataFolder savedDFEndFunction HandleADCCheckbox(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked	String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer	Variable iADCChannel=str2num(ctrlName[3])	WAVE adcChannelOn	adcChannelOn[iADCChannel]=checked	SetDataFolder savedDFEndFunction HandleDACCheckbox(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked	String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer	Variable iDACChannel=str2num(ctrlName[3])	WAVE dacChannelOn	dacChannelOn[iDACChannel]=checked	SetDataFolder savedDFEndFunction HandleTTLCheckbox(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked	String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer	Variable iTTLChannel=str2num(ctrlName[3])	WAVE ttlOutputChannelOn	ttlOutputChannelOn[iTTLChannel]=checked	SetDataFolder savedDFEndFunction HandleDACWavePopupMenu(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer	WAVE /T dacWavePopupSelection	Variable iChannel		iChannel=str2num(ctrlName[3])	dacWavePopupSelection[iChannel]=popStr	SetDataFolder savedDFEndFunction HandleTTLWavePopupMenu(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr		String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer	WAVE /T ttlWavePopupSelection	Variable iChannel	iChannel=str2num(ctrlName[3])	ttlWavePopupSelection[iChannel]=popStr	SetDataFolder savedDFEndFunction HandleADCBaseNameSetVariable(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName		String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer	WAVE /T adcBaseName		Variable i=str2num(ctrlName[3])  // ADC channel index	adcBaseName[i]=varStr	SetDataFolder savedDFEndFunction AcquireSweep(comment)	// Acquire a single sweep, which consists of n traces, each trace corresponding to a single 	// ADC channel.  Add the supplied comment to the acquired waves.	String comment		// Get the number of all extant DP Browsers, so that we can tell them when sweeps get added	Wave browserNumbers=GetAllBrowserNumbers()  // returns a free wave		// Save the current data folder, set it	String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer		NVAR iSweep	//NVAR sint	//NVAR pn	//NVAR error	//WAVE FIFOin	//WAVE FIFOout	WAVE /T adcBaseName	NVAR autoAnalyzeChecked	String thisWaveNameRel	//String savename	String thisstr, doit, whichadc	Variable leftmin, leftmax		DoWindow /F SweepControl		//MakeITCseq()	StepPulseParametersChanged()	SynPulseParametersChanged()	Wave FIFOout=GetFIFOout()	if (numpnts(FIFOout)==0)		Abort "There must be at least one valid DAC or TTL output wave"	endif	//if (error>0)	//	error=1	//	Abort "data acquisition terminated"	//endif		// Get the ADC and DAC sequences from the model	String daseq=GetDACSequence()	String adseq=GetADCSequence()	// Actually acquire the data for this sweep	Wave FIFOin=SampleData(adseq,daseq,FIFOout) 	// raw acquired data is now in root:DP_Digitizer:FIFOin wave	//	// Do pN Subtraction, if called for//	ControlInfo pn_check//	if (V_value>0)//		Duplicate /O FIFOout PNout//		Duplicate /O FIFOin PNin//		PNout=FIFOout/pn//		FIFOout=PNout//		Variable i//		for (i=0; i<abs(pn); i+=1)//			Wave FIFOin=SampleData(adseq,daseq,FIFOout)//			if (pn<0)//				PNin+=FIFOin//			else//				PNin-=FIFOin//			endif//		endfor//		FIFOin=PNin//	endif		// This is a mistake, b/c user might already have DP browsers the way they want them	//// Bring the DP Browsers forward	//Variable nBrowsers=numpnts(browserNumbers)	//for (i=0;i<nBrowsers;i+=1)	//	String browserNameThis=BrowserNameFromNumber(browserNumbers[i])	//	DoWindow /F $browserNameThis	//endfor		//String browserName=BrowserNameFromNumber(browserNumbers)	//DoWindow /F $browserName		// Get the number of ADC channels in use	Variable nADCInUse=GetNumADCChannelsInUse()		// Extract individual traces from FIFOin, store them in the appropriate waves	//String nameOfVarHoldingADCWaveBaseName	WAVE /T unitsFromMode	Variable iADCChannel		// index of the relevant ADC channel	WAVE adcMode	// wave s.t. adcMode[i] gives the channel type-code for ADC i	String stepAsString=StringByKeyInWaveNote(FIFOout,"STEP")	// will add to ADC waves		Variable nSamplesPerTrace=numpnts(FIFOin)/nADCInUse	Variable ingain	Variable iTrace	Variable dtFIFOin=deltax(FIFOin)	String units	for (iTrace=0; iTrace<nADCInUse; iTrace+=1)		SetDataFolder root:DP_Digitizer  // added by ALT 2012-05-23			// Must be here for adc1, adc2, etc. to get saved to waves with the right names		iADCChannel=str2num(adseq[iTrace])		//sprintf nameOfVarHoldingADCWaveBaseName "adcBaseName%d", iADCChannel		//SVAR base=$nameOfVarHoldingADCWaveBaseName		sprintf thisWaveNameRel "%s_%d", adcBaseName[iTrace], iSweep		//sprintf savename "%s.bwav", thisWaveNameRel		SetDataFolder root:		Make /O /N=(nSamplesPerTrace) $thisWaveNameRel		String thisWaveNameAbs="root:"+thisWaveNameRel		WAVE thisWave=$thisWaveNameAbs		AnnotateADCWaveBang(thisWave,stepAsString,comment)		ingain=GetADCNativeUnitsPerPoint(iADCChannel)		thisWave=FIFOin[nADCInUse*p+iTrace]*ingain			// copy this trace out of the FIFO, and scale it by the gain		Setscale /P x, 0, nADCInUse*dtFIFOin, "ms", thisWave		units=unitsFromMode[adcMode[iADCChannel]]		SetScale d 0, 0, units, thisWave		//Save /O /P=home thisWave as savename	endfor	// This needs to be smarter, since we don't know what traces they are showing 	// in the DP browser.	////	// Make sure the traces are shown if they were acquired//	if ( nADCInUse>=1 )//		SetTraceAChecked(browserNumbers,1)//	endif//	if ( nADCInUse>=2 )//		SetTraceBChecked(browserNumbers,1)//	endif		// Update the sweep number in the DP Browsers	Variable nBrowsers=numpnts(browserNumbers)	Variable i	for (i=0;i<nBrowsers;i+=1)		SetICurrentSweepAndSyncView(browserNumbers[i],iSweep)	endfor		// Update some of the acquisition counters	iSweep+=1	//iSweepPrevious=iSweep-1		//// Bring the data acquistion panel forward, for some reason	//DoWindow /F SweepControl			// Update the windows, so user can see the new sweep	DoUpdate	// If called for, run the per-user function	if (autoAnalyzeChecked)		AutoAnalyze()		DoUpdate	endif	// Restore the original data folder	SetDataFolder savedDFEndFunction AcquireTrial()	// Acquire a single trial, which is composed of n sweeps	String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer	Variable start_time, last_time	String temp_comments, doit	NVAR nSweepsPerTrial	NVAR sweepInterval	//NVAR error	String comment	Variable iSweepWithinTrial	for (iSweepWithinTrial=0;iSweepWithinTrial<nSweepsPerTrial; iSweepWithinTrial+=1)			if (iSweepWithinTrial<1)			start_time = DateTime		else			start_time = last_time + sweepInterval		endif		if (nSweepsPerTrial==1)			sprintf comment "stim %d of %d",iSweepWithinTrial+1,nSweepsPerTrial		else			sprintf comment "stim %d of %d, with inter-stim-interval of %d",iSweepWithinTrial+1,nSweepsPerTrial,sweepInterval		endif		sprintf doit, "Sleep /A %s", Secs2Time(start_time,3)		Execute doit		AcquireSweep(comment)  // this calls DoUpdate() inside		//if (error>0)		//	error=0		//	Abort 		//endif		last_time = start_time		//SaveStimHistory()	endfor	//comment=""	SetDataFolder savedDFEndFunction /WAVE SampleData(adseq,daseq,FIFOoutFree)	// The heart of the data acquisition.  On exit, the raw acquired data is in the wave	// root:DP_Digitizer:FIFOin .	String adseq	String daseq	Wave FIFOoutFree		String savedDF=GetDataFolder(1)	SetDataFolder root:DP_Digitizer	NVAR itc	NVAR usPerDigitizerClockTick	WAVE FIFOout, FIFOin	// wave references to bound waves that don't exist yet.	// Duplicate FIFOoutFree into a bound wave	Duplicate /O FIFOoutFree, FIFOout	// Make the FIFOin wave (cannot be free)	Variable nSamplesFIFO=numpnts(FIFOout)	Variable dtFIFO=deltax(FIFOout)	Make /O /N=(nSamplesFIFO) FIFOin	SetScale /P x, 0, dtFIFO, "ms", FIFOin	// Calculate the number of digitizer clock ticks per FIFO sampling interval	// If this is not an integer, that is a problem	Variable usPerFIFODt=1000*dtFIFO	// us	Variable nDigitizerClockTicksPerDtWant=usPerFIFODt/usPerDigitizerClockTick	Variable nDigitizerClockTicksPerDt=round(nDigitizerClockTicksPerDtWant)		if (abs(nDigitizerClockTicksPerDtWant-nDigitizerClockTicksPerDt)>0.001)		// Can't sample at that rate, given the digitizer settings.		// The FIFO dt has to be an integer multiple of the digitizer dt, and that integer has to be >=4.		// Abort, but suggest a sampling rate to the user that will work.		Variable seqLength=GetSequenceLength()		Variable dtRecommended		if (nDigitizerClockTicksPerDt>=4)			dtRecommended=nDigitizerClockTicksPerDt*usPerDigitizerClockTick*seqLength/1000;		// ms		else			dtRecommended=4*usPerDigitizerClockTick*seqLength/1000;		// ms		endif		Abort sprintf3fff("The FIFO sampling interval, %0.2f us, is not an integer multiple of the digitizer clock interval, %0.2f us.  Setting the sampling interval to %0.5f ms will fix this.",usPerFIFODt,usPerDigitizerClockTick,dtRecommended)	endif	if (nDigitizerClockTicksPerDt<4)		Abort sprintf2ff("Cannot sample that fast.  The given sampling parameters result in a FIFO sampling interval of %0.2f us, and the shortest possible FIFO sampling interval is %0.2f.  Increase the sampling interval, or use fewer channels.",usPerFIFODt,4*usPerDigitizerClockTick)	endif		String commandLine	if (itc==0)		WAVE StepPulse_DAC		FIFOin=sin(0.05*x)+gnoise(0.1)+StepPulse_DAC+5	elseif (itc==16)		Execute "ITC16StimClear 0"		//Execute "ITC16Seq daseq, adseq"		sprintf commandLine "ITC16Seq \"%s\", \"%s\"", daseq, adseq		Execute commandLine		sprintf commandLine, "ITC16StimAndSample FIFOout, FIFOin, %d, 14", nDigitizerClockTicksPerDt		Execute commandLine		Execute "ITC16StopAcq"	elseif (itc==18)		// might need to change acqflags to 14 to make this work		//Execute "ITC18StimClear 0"  // ALT, 2012/05/23		//Execute "ITC18Seq daseq, adseq"		sprintf commandLine "ITC18Seq \"%s\", \"%s\"", daseq, adseq		Execute commandLine		Execute "ITC18Stim FIFOout"		sprintf commandLine, "ITC18StartAcq %d,2,0", nDigitizerClockTicksPerDt		Execute commandLine		Execute "ITC18Samp FIFOin"		Execute "ITC18StopAcq"	else		// do nothing	endif		// Copy the FIFOin wave to a free wave, then delete the non-free wave	Duplicate /FREE FIFOin, FIFOinFree	KillWaves FIFOin, FIFOout		SetDataFolder savedDF	return FIFOinFreeEndFunction AnnotateADCWaveBang(w,stepAsString,comment)	Wave w	String stepAsString,comment	Note /K w	ReplaceStringByKeyInWaveNote(w,"COMMENTS",comment)		ReplaceStringByKeyInWaveNote(w,"WAVETYPE","adc")	ReplaceStringByKeyInWaveNote(w,"TIME",time())	ReplaceStringByKeyInWaveNote(w,"STEP",stepAsString)	End