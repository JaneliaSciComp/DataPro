//	DataPro//	DAC/ADC macros for use with Igor Pro and the ITC-16 or ITC-18//	Nelson Spruston//	Northwestern University//	project began 10/27/1998//	last updated 6/12/2002#pragma rtGlobals=1		// Use modern global access method.//---------------------- DataPro Acquire STARTUP ----------------------//Function MakeADCDACWaves()	String savedDF=GetDataFolder(1)	NewDataFolder /O/S root:DP_DigitizerControl	Variable nSamples=140////	now make the test pulse DAC and ADC waves//	Make /O/N=(nSamples) TestPulse_DAC//	SetScale d 0,0,"points", TestPulse_DAC//	Setscale x, 0, 0, "ms", TestPulse_DAC//	Duplicate /O TestPulse_DAC TestPulse_ADC//	now make the step pulse DAC and ADC waves	Make /O/N=(nSamples) StepPulse_DAC	SetScale d 0,0,"points", StepPulse_DAC	Setscale x, 0, 0, "ms", StepPulse_DAC	Duplicate /O StepPulse_DAC StepPulse_ADC	Duplicate /O StepPulse_DAC SynPulse_TTL//	make waves for pulse builder	Make /O/N=1000 Step5DAC, TrainDAC, RampDAC, PSCDAC, SineDAC, NewDAC	Make /O/N=5 amplitude, duration	Variable /G stepdur0, stepdur1, stepdur2, stepdur3, stepdur4	Variable /G stepamp0, stepamp1, stepamp2, stepamp3, stepamp4, sintpb	stepdur0=10; stepdur1=10; stepdur2=10; stepdur3=10; stepdur4=10	stepamp1=10; stepamp3=10; sintpb=0.01	Variable /G traindur0, traindur1, traindur2, trainnum, trainfreq, trainamp, trainbase, traindur	traindur0=10; traindur1=10; traindur2=10; trainnum=10	trainfreq=10; trainamp=10; trainbase=0; traindur=2	Variable /G rampdur1, rampdur2, rampdur3, rampdur4, rampamp1, rampamp2, rampamp3, rampamp4	rampdur1=10; rampdur2=50; rampdur3=10; rampdur4=10; rampamp1=-10; rampamp2=0; rampamp3=10; rampamp4=0	Variable /G pscdur0, pscdur1, pscdur2, pscamp, psctaur, psctaud1, psctaud2, wttd2	pscdur0=10; pscdur1=50; pscdur2=10; pscamp=10; psctaur=0.2; psctaud1=2; psctaud2=10; wttd2=0.5	Variable /G sinedur0, sinedur1, sinedur2, sineamp, sinefreq	sinedur0=10; sinedur1=50; sinedur2=10; sineamp=10; sinefreq=100//	for PN subtraction	//Variable /G pn	//pn=-4//	check for error condition	Variable /G error//	make average wave for imaging	//NewDataFolder /O/S root:DP_Imaging	//Make /N=(imageavgn) dff_avg//	return to default folder	SetDataFolder savedDFEndFunction SetupDigitizerPostUser()	//SyncGainsToChannelTypes()End//_______________________DataPro TEST PULSE MACROS_________________________////Function /WAVE GetTestPulse()//	// Returns a test pulse wave, suitable for pushing to a DAC channel.////	// Set the DF//	String savDF=GetDataFolder(1)//	SetDataFolder root:DP_DigitizerControl//	//	// test pulse parameters//	NVAR sinttp, tpamp, tpdur////	// Restore the DF//	SetDataFolder savDF//		//	// Generate the (free) wave//	Wave TestPulse_TTL=SimplePulse(sinttp,0.5*tpdur,tpdur,0.5*tpdur,tpamp)//		//	// return//	return TestPulse_DAC//End////Function /WAVE GetTestPulseBoolean()//	// Returns a test pulse wave, suitable for pushing to a TTL channel.////	// Set the DF//	String savDF=GetDataFolder(1)//	SetDataFolder root:DP_DigitizerControl//	//	// test pulse parameters//	NVAR sinttp, tpdur//	//	// Generate the (free) wave//	Wave TestPulse_TTL=SimplePulseBoolean(sinttp,0.5*tpdur,tpdur,0.5*tpdur)//		//	// Restore the DF//	SetDataFolder savDF//	//	// return//	return TestPulse_TTL//End//Function TPWinButtonProc(ctrlName) : ButtonControl//	String ctrlName//	if (wintype("TestPulseDisplay")<1)//		Execute "TestPulseDisplay()"//	else//		DoWindow /F TestPulseDisplay	//	endif//	if (wintype("SweepControl")<1)//		Execute "SweepControl()"//	else//		DoWindow /F SweepControl	//	endif//	SetTPValues()//End//Function BsubCheck(ctrlName,checked) : CheckBoxControl//	String ctrlName//	Variable checked//End//Function TPampProc(ctrlName,varNum,varStr,varName) : SetVariableControl//	String ctrlName//	Variable varNum//	String varStr//	String varName//	//	NVAR testPulseTTLOutput//	NVAR tpamp, tpgateamp//	if (testPulseTTLOutput)//		tpamp=tpgateamp//	endif//End//_______________________DataPro DATA ACQUISITION MACROS_________________________//Function BuildStepPulse()	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl		NVAR sintsp, spamp, spdur	WAVE StepPulse_DAC	// bound wave		Duplicate /O SimplePulse(sintsp,0.2*spdur,spdur,0.5*spdur,spamp) StepPulse_DAC		Note /K StepPulse_DAC	ReplaceStringByKeyInWaveNote(StepPulse_DAC,"WAVETYPE","step3dac")	ReplaceStringByKeyInWaveNote(StepPulse_DAC,"TIME",time())	ReplaceStringByKeyInWaveNote(StepPulse_DAC,"STEP",num2str(spamp))	SetDataFolder savDFEndFunction BuildSynTTLPulse()	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl	NVAR syntime, syndur	Variable first, last, sintms	Duplicate /O StepPulse_DAC SynPulse_TTL	Note /K SynPulse_TTL	ReplaceStringByKeyInWaveNote(SynPulse_TTL,"WAVETYPE","synttl")	ReplaceStringByKeyInWaveNote(SynPulse_TTL,"TIME",time())	SynPulse_TTL=0	sintms=deltax(SynPulse_TTL)	first=syntime/sintms	last=first+syndur/sintms	SynPulse_TTL[first,last]=1	SetDataFolder savDFEndFunction AcquireSweep(comment)	// Acquire a single sweep, which consists of n traces, each trace corresponding to a single 	// ADC channel.  Add the supplied comment to the acquired waves.	String comment		Wave browserNumber=GetAllBrowserNumbers()  // returns a free wave	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl		NVAR iSweep	//NVAR sint	NVAR pn	NVAR error	//WAVE FIFOin	//WAVE FIFOout	WAVE /T adcBaseName	NVAR autoAnalyzeChecked	String thisWaveNameRel	//String savename	String thisstr, doit, whichadc	Variable leftmin, leftmax		DoWindow /F SweepControl		//MakeITCseq()	BuildStepPulse()	BuildSynTTLPulse()	Wave FIFOout=GetFIFOout()	if (numpnts(FIFOout)==0)		Abort "There must be at least one valid DAC or TTL output wave"	endif	if (error>0)		error=1		Abort "data acquisition terminated"	endif		// Get the ADC and DAC sequences from the model	String daseq=GetDACSequence()	String adseq=GetADCSequence()	// Actually acquire the data for this sweep	Wave FIFOin=SampleData(adseq,daseq,FIFOout) 	// raw acquired data is now in root:DP_DigitizerControl:FIFOin wave		// Do pN Subtraction, if called for	ControlInfo pn_check	if (V_value>0)		Duplicate /O FIFOout PNout		Duplicate /O FIFOin PNin		PNout=FIFOout/pn		FIFOout=PNout		Variable i		for (i=0; i<abs(pn); i+=1)			Wave FIFOin=SampleData(adseq,daseq,FIFOout)			if (pn<0)				PNin+=FIFOin			else				PNin-=FIFOin			endif		endfor		FIFOin=PNin	endif		// This is a mistake, b/c user might already have DP browsers the way they want them	//// Bring the DP Browsers forward	//Variable nBrowsers=numpnts(browserNumber)	//for (i=0;i<nBrowsers;i+=1)	//	String browserNameThis=BrowserNameFromNumber(browserNumber[i])	//	DoWindow /F $browserNameThis	//endfor		//String browserName=BrowserNameFromNumber(browserNumber)	//DoWindow /F $browserName		// Get the number of ADC channels in use	Variable nADCInUse=GetNumADCChannelsInUse()		// Extract individual traces from FIFOin, store them in the appropriate waves	//String nameOfVarHoldingADCWaveBaseName	String units	Variable iADCChannel		// index of the relevant ADC channel	WAVE adcType	// wave s.t. adcType[i] gives the channel type-code for ADC i	SVAR unitsCurrent, unitsVoltage	String stepAsString=StringByKeyInWaveNote(FIFOout,"STEP")	// will add to ADC waves		Variable nSamplesPerTrace=numpnts(FIFOin)/nADCInUse	Variable ingain	Variable iTrace	Variable dtFIFOin=deltax(FIFOin)	for (iTrace=0; iTrace<nADCInUse; iTrace+=1)		SetDataFolder root:DP_DigitizerControl  // added by ALT 2012-05-23			// Must be here for adc1, adc2, etc. to get saved to waves with the right names		iADCChannel=str2num(adseq[iTrace])		//sprintf nameOfVarHoldingADCWaveBaseName "adcBaseName%d", iADCChannel		//SVAR base=$nameOfVarHoldingADCWaveBaseName		sprintf thisWaveNameRel "%s_%d", adcBaseName[iTrace], iSweep		//sprintf savename "%s.bwav", thisWaveNameRel		SetDataFolder root:		Make /O /N=(nSamplesPerTrace) $thisWaveNameRel		String thisWaveNameAbs="root:"+thisWaveNameRel		WAVE thisWave=$thisWaveNameAbs		AnnotateADCWaveBang(thisWave,stepAsString,comment)		ingain=GetADCNativeUnitsPerPoint(iADCChannel)		thisWave=FIFOin[nADCInUse*p+iTrace]*ingain			// copy this trace out of the FIFO, and scale it by the gain		Setscale /P x, 0, nADCInUse*dtFIFOin, "ms", thisWave		if (adcType[iADCChannel]==1)			// current channel			units=unitsCurrent		else			// voltage channel			units=unitsVoltage		endif					SetScale d 0, 0, units, thisWave		//Save /O /P=home thisWave as savename	endfor	// This needs to be smarter, since we don't know what traces they are showing 	// in the DP browser.	////	// Make sure the traces are shown if they were acquired//	if ( nADCInUse>=1 )//		SetTraceAChecked(browserNumber,1)//	endif//	if ( nADCInUse>=2 )//		SetTraceBChecked(browserNumber,1)//	endif		// Update the sweep number in the DP Browsers	Variable nBrowsers=numpnts(browserNumber)	for (i=0;i<nBrowsers;i+=1)		SetICurrentSweepAndSyncView(browserNumber[i],iSweep)	endfor		// Update some of the acquisition counters	iSweep+=1	//iSweepPrevious=iSweep-1		//// Bring the data acquistion panel forward, for some reason	//DoWindow /F SweepControl			// Update the windows, so user can see the new sweep	DoUpdate	// If called for, run the per-user function	if (autoAnalyzeChecked)		AutoAnalyze()		DoUpdate	endif	// Restore the original data folder	SetDataFolder savDFEndFunction AnnotateADCWaveBang(w,stepAsString,comment)	Wave w	String stepAsString,comment	Note /K w	ReplaceStringByKeyInWaveNote(w,"COMMENTS",comment)		ReplaceStringByKeyInWaveNote(w,"WAVETYPE","adc")	ReplaceStringByKeyInWaveNote(w,"TIME",time())	ReplaceStringByKeyInWaveNote(w,"STEP",stepAsString)	End//Function EPhys_Image()//	Variable sidx_handle, status, exposure, canceled//	String message, command//	if (ccd_opened<1)//		SIDX_Begin()//	endif////	if (sidx_handle==  4.306e+07)////		SIDX_Begin_Auto()////	endif////	SIDX_Setup()//	image_trig=1//	SIDX_Setup_Auto()//	image_roi=2		// zero for full frame, one for specific ROI, two for ROI with background//	im_plane=0//	FluorescenceON()//	Execute "Sleep /S 0.1"//	sprintf command, "Image_Stack(image_trig,0)"//	Execute command//	print "done with image stack"//	sprintf command, "Get_DFoverF_from_Stack(%d)", iSweepPrevious//	Execute command//	sprintf command, "Append_DFoverF(%d)", iSweepPrevious//	Execute command//	FluorescenceOFF()//	printf "%s%d: Image with EPhys done\r", imageseq_name, iSweepPrevious//EndFunction DataButtonProc(ctrlName) : ButtonControl	// Raise or create the three windows used for data acquisition	String ctrlName		RaiseOrCreateMainWindows()EndFunction RaiseOrCreateMainWindows()	// Raise or create the three main windows used for data acquisition	RaiseOrCreatePanel("DigitizerControl")	RaiseOrCreatePanel("SweepControl")	RaiseOrCreateDataProBrowser()	NewTestPulseWindow()EndFunction HandleGetDataButton(ctrlName) : ButtonControl	String ctrlName	AcquireTrial()EndFunction AcquireTrial()	// Acquire a single trial, which is composed of n sweeps	String savDF=GetDataFolder(1)	NewDataFolder /O/S root:DP_DigitizerControl	Variable start_time, last_time	String temp_comments, doit	NVAR nSweepsPerTrial	NVAR sweep_interval	NVAR error	String comment	Variable iSweepWithinTrial	for (iSweepWithinTrial=0;iSweepWithinTrial<nSweepsPerTrial; iSweepWithinTrial+=1)			if (iSweepWithinTrial<1)			start_time = DateTime		else			start_time = last_time + sweep_interval		endif		if (nSweepsPerTrial==1)			sprintf comment "stim %d of %d",iSweepWithinTrial+1,nSweepsPerTrial		else			sprintf comment "stim %d of %d, with inter-stim-interval of %d",iSweepWithinTrial+1,nSweepsPerTrial,sweep_interval		endif		sprintf doit, "Sleep /A %s", Secs2Time(start_time,3)		Execute doit		AcquireSweep(comment)  // this calls DoUpdate() inside		if (error>0)			error=0			Abort 		endif		last_time = start_time		//SaveStimHistory()	endfor	//comment=""	SetDataFolder savDFEndFunction DPampProc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName//	SetDPvalues()	BuildStepPulse()EndFunction DPdurCheckProc(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked	if (cmpstr(ctrlName,"spdur_check0")!=0)		CheckBox spdur_check0 value=0		CheckBox spdur_check1 value=1	else		CheckBox spdur_check1 value=0		CheckBox spdur_check0 value=1	endif//	SetDPvalues()	BuildStepPulse()EndFunction DPdurProc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName//	SetDPvalues()	BuildStepPulse()End//______________________DataPro Imaging PROCEDURES__________________________//Function ImagingButtonProc(ctrlName) : ButtonControl	String ctrlName	if (wintype("ImagingPanel")<1)		Execute "ImagingPanel()"	else		DoWindow /F ImagingPanel		endifEndFunction FluONButtonProc(ctrlName) : ButtonControl	String ctrlName	FluorescenceON()EndFunction FluorescenceON()	String command	NVAR wheel=fluo_on_wheel	SetVDTPort("COM1")	Execute "VDTWriteBinary 238"	sprintf command "VDTWriteBinary 8%d", wheel	Execute command//	print "fluorescence on"EndFunction FluOFFButtonProc(ctrlName) : ButtonControl	String ctrlName	FluorescenceOFF()EndFunction FluorescenceOFF()	SetVDTPort("COM1")	Execute "VDTWriteBinary 238"	Execute "VDTWriteBinary 80"//	print "fluorescence off"EndFunction SetVDTPort(name)	String name	Execute "VDTGetPortList"	SVAR port=S_VDT	NVAR imaging=imaging	String command	imaging=1	if (cmpstr(port,"")==0)		imaging=0		Abort "A serial port could not be located"	else		sprintf command, "VDTOperationsPort %s", name		Execute command	endifEndFunction ImagingCheckProc(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked	NVAR imaging=imaging	Execute "VDTGetPortList"	SVAR port=S_VDT	if (checked>0)		imaging=1		SetVDTPort("COM1")	else		imaging=0	endifEnd//______________________DataPro Data Acquisition HISTORY__________________________////________________________written by Don Cooper________________________________////Function SaveStimHistory()//	String savDF=GetDataFolder(1)//	NewDataFolder /O/S root:DP_DigitizerControl//	Variable StimHsize, wavenum//	String theMultDac, theDacGain, theDacPopup//	NVAR nSweepsPerTrial//	NVAR iSweep=iSweep, HoldV=HoldV,NumRepeats=NumRepeats, IStimI=IStimI, TempV=TempV, Rseal=Rseal//	NVAR MadeStimHist=MadeStimHist, dacGain1=dacGain1, spamp=spamp, spdur=spdur//	NVAR dacGain2=dacGain2, pn=pn//	//SVAR wave_comments//	String daseq=GetDACSequence()////	String history="StimHistory"////  ***daseq*** = string listing which DAC's are checked          //     sprintf theMultDac "multdac%s", daseq[0]//     sprintf theDacGain "dacGain%s", daseq[0]//     sprintf theDacPopup "dacpopup_%s", daseq[0]//     NVAR theMD=$theMultDac, theDG=$theDacGain//     wavenum=iSweep-1//// make a table... but check to see if it's already been made first//	if (exists("StimHistory")!=1)//		Make/T/O/N=(2,11) StimHistory//		StimHistory[0][0]="Stimulus Wave"//		StimHistory[0][1]="Wave Multiplier"//		StimHistory[0][2]="Holding Potential"//		StimHistory[0][3]="Gain"//		StimHistory[0][4]="Current Step"		//for step_pulses//		StimHistory[0][5]="Step Duration"		//for step_pulses//		StimHistory[0][6]="pN"//		StimHistory[0][7]="Comments"//		StimHistory[0][8]="Time"//		StimHistory[0][9]="Temp"//		Stimhistory[0][10]="Seal"//	endif////	insert appropriate row(s) in table//	StimHsize= dimsize(StimHistory,0)//	if (StimHsize<=wavenum)//		if (StimHsize==wavenum)//			InsertPoints wavenum,1, StimHistory//		else//			InsertPoints StimHsize,(1+wavenum-StimHsize), StimHistory//		endif//	endif//// enter all the other data //	ControlInfo /W=DigitizerControl $theDacPopup//	StimHistory[wavenum][0]=S_Value                   		//the stimulus wave//	StimHistory[wavenum][1]=num2str(theMD)         	//the wave multiplier//	StimHistory[wavenum][2]=num2str(HoldV)     		//the holding potential//	StimHistory[wavenum][3]=num2str(theDG)          	//gain on stimulator//	StimHistory[wavenum][6]=num2str(pn)             	//pN//	StimHistory[wavenum][7]=""		            		//comments//	StimHistory[wavenum][8]=time()                    		//approx. time of data acqisition//	StimHistory[wavenum][9]=num2str(TempV)		//Temperature//	StimHistory[wavenum][10]=num2str(RSeal)		//SR//	if (cmpstr(S_value,"StepPulse_DAC")==0)			//if the stim is a "step pulse"...//		StimHistory[wavenum][4]=num2str(spamp)     		 //the current step//		StimHistory[wavenum][5]=num2str(spdur)     		 //step duration//	else//		StimHistory[wavenum][4]=""     		 //don't put anything//		StimHistory[wavenum][5]=""     		 //don't put anything//	endif//	SetDataFolder savDF//End//______________________DataPro Data Acquisition PROCEDURES__________________________////Function MakeITCseq()//	// Determines the sequencing strings required by the ITC functions for proper A/D and D/A.//	// Reads: dacChannelOn, ttlOutputChannelOn, adcChannelOn//	// Writes: daseq, adseq, nADCInUse, nDACInUse, seqlength//	//	// Shut up//	Silent 1//	//	// Change to the DigitizerControl data folder//	String savDF=GetDataFolder(1)//	NewDataFolder /O/S root:DP_DigitizerControl////	// Declare the DF vars we need//	NVAR nDACInUse, nADCInUse, seqlength//	SVAR daseq, adseq//	WAVE dacChannelOn, ttlOutputChannelOn, adcChannelOn////	// Build up the strings that the ITC functions use to sequence the//	// inputs and outputs	//	daseq=""//	adseq=""//	Variable i//	for (i=0; i<4; i+=1)//		if (dacChannelOn[i]>0)//			daseq+=num2str(i)//		endif//	endfor//	for (i=0; i<4; i+=1)//		if (ttlOutputChannelOn[i]>0)//			daseq+="D"//			break//		endif//	endfor//	for (i=0; i<8; i+=1)//		if (adcChannelOn[i]>0)//			adseq+=num2str(i)//		endif//	endfor//	//	// Because the DA and AD sequences must be the same length, we find the least common multiple//	// of the number of channels in use, and duplicate the sequences as needed.//	// (But why not use Noops?  Especially if, for instance, nDACInUse is zero?)//	nDACInUse=strlen(daseq)//	nADCInUse=strlen(adseq)//	seqlength=LCM(nDACInUse, nADCInUse)	//	calculate the length of the AD and DA sequence strings (must be the same)//	String shortdaseq, shortadseq//	if (nDACInUse!=nADCInUse)//		shortdaseq=daseq; shortadseq=adseq//		daseq=""; adseq=""//		for (i=0; i<seqlength/nDACInUse; i+=1)//			daseq+=shortdaseq//		endfor//		for (i=0; i<seqlength/nADCInUse; i+=1)//			adseq+=shortadseq//		endfor//	endif//	//	// Restore the original DF//	SetDataFolder savDF//EndFunction /WAVE SampleData(adseq,daseq,FIFOoutFree)	// The heart of the data acquisition.  On exit, the raw acquired data is in the wave	// root:DP_DigitizerControl:FIFOin .	String adseq	String daseq	Wave FIFOoutFree		String savDF=GetDataFolder(1)	NewDataFolder /O/S root:DP_DigitizerControl	NVAR itc	NVAR usPerDigitizerClockTick	WAVE FIFOout, FIFOin	// wave references to bound waves that don't exist yet.	// Duplicate FIFOoutFree into a bound wave	Duplicate /O FIFOoutFree, FIFOout	// Make the FIFOin wave (cannot be free)	Variable nSamplesFIFO=numpnts(FIFOout)	Variable dtFIFO=deltax(FIFOout)	Make /O /N=(nSamplesFIFO) FIFOin	SetScale /P x, 0, dtFIFO, "ms", FIFOin	// Calculate the number of digitizer clock ticks per FIFO sampling interval	// If this is not an integer, that is a problem	Variable usPerFIFODt=1000*dtFIFO	// us	Variable nDigitizerClockTicksPerDtWant=usPerFIFODt/usPerDigitizerClockTick	Variable nDigitizerClockTicksPerDt=round(nDigitizerClockTicksPerDtWant)		if (abs(nDigitizerClockTicksPerDtWant-nDigitizerClockTicksPerDt)>0.001)		// Can't sample at that rate, given the digitizer settings.		// The FIFO dt has to be an integer multiple of the digitizer dt, and that integer has to be >=4.		// Abort, but suggest a sampling rate to the user that will work.		Variable seqLength=GetSequenceLength()		Variable dtRecommended		if (nDigitizerClockTicksPerDt>=4)			dtRecommended=nDigitizerClockTicksPerDt*usPerDigitizerClockTick*seqLength/1000;		// ms		else			dtRecommended=4*usPerDigitizerClockTick*seqLength/1000;		// ms		endif		Abort sprintf3fff("The FIFO sampling interval, %0.2f us, is not an integer multiple of the digitizer clock interval, %0.2f us.  Setting the sampling interval to %0.5f ms will fix this.",usPerFIFODt,usPerDigitizerClockTick,dtRecommended)	endif	if (nDigitizerClockTicksPerDt<4)		Abort sprintf2ff("Cannot sample that fast.  The given sampling parameters result in a FIFO sampling interval of %0.2f us, and the shortest possible FIFO sampling interval is %0.2f.  Increase the sampling interval, or use fewer channels.",usPerFIFODt,4*usPerDigitizerClockTick)	endif		String commandLine	if (itc==0)		WAVE StepPulse_DAC		FIFOin=sin(0.05*x)+gnoise(0.1)+StepPulse_DAC+5	elseif (itc==16)		Execute "ITC16StimClear 0"		//Execute "ITC16Seq daseq, adseq"		sprintf commandLine "ITC16Seq \"%s\", \"%s\"", daseq, adseq		Execute commandLine		sprintf commandLine, "ITC16StimAndSample FIFOout, FIFOin, %d, 14", nDigitizerClockTicksPerDt		Execute commandLine		Execute "ITC16StopAcq"	elseif (itc==18)		// might need to change acqflags to 14 to make this work		//Execute "ITC18StimClear 0"  // ALT, 2012/05/23		//Execute "ITC18Seq daseq, adseq"		sprintf commandLine "ITC18Seq \"%s\", \"%s\"", daseq, adseq		Execute commandLine		Execute "ITC18Stim FIFOout"		sprintf commandLine, "ITC18StartAcq %d,2,0", nDigitizerClockTicksPerDt		Execute commandLine		Execute "ITC18Samp FIFOin"		Execute "ITC18StopAcq"	else		// do nothing	endif		// Copy the FIFOin wave to a free wave, then delete the non-free wave	Duplicate /FREE FIFOin, FIFOinFree	KillWaves FIFOin, FIFOout		SetDataFolder savDF	return FIFOinFreeEnd//___________________________DataPro CLAMP MODE___________________________//Function ToggleClampButtonProc(ctrlName) : ButtonControl	String ctrlName	print "switch all clamp modes together - not yet implemented"	Variable i=0//	do//		SwitchClampMode(i,x)//		i+=1//	while(i<8)End//______________________DataPro ADC AND DAC CONTROL____________________//Function ADC_DACButtonProc(ctrlName) : ButtonControl	String ctrlName	RaiseOrCreatePanel("DigitizerControl")End//__________________________DataPro DAC PULSE BUILDER___________________________//Function DACBuilderButtonProc(ctrlName) : ButtonControl	String ctrlName	if (wintype("DACPulses")<1)		Execute "DACPulses()"	else		DoWindow /F DACPulses		endifEndFunction ReadwaveButtonProc(ctrlName) : ButtonControl	String ctrlName	LoadWaveEndFunction SaveDACButtonProc(ctrlName) : ButtonControl	String ctrlName	SaveDAC()EndFunction SaveDAC()	String waveNameString	Prompt waveNameString, "Enter wave name that ends in _DAC or _TTL:"	DoPrompt "Save DAC", waveNameString	if (V_Flag)		return -1		// user hit Cancel	endif	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl	WAVE NewDAC	Duplicate /O NewDAC $waveNameString	//String filestr	//filestr=waveNameString+".bwav"	//Save /C $waveNameString as filestr	SetDataFolder savDFEndFunction FiveSegButtonProc(ctrlName) : ButtonControl	String ctrlName	LaunchFiveSegBuilder()EndFunction LaunchFiveSegBuilder()	if (wintype("FiveSegBuilder")<1)		FiveSegBuilder()		Execute "StepVarChange()"	else		DoWindow /F FiveSegBuilder	endifEndFunction StepVarProc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	Execute "StepVarChange()"End//Function FromFileCheckProc(ctrlName,checked) : CheckBoxControl//	String ctrlName//	Variable checked//	String savDF=GetDataFolder(1)//	SetDataFolder root:DP_DigitizerControl//	NVAR ffseg=ffseg//	String doit//	if (checked>0)//		ffseg=str2num(ctrlName[3])////		print ffseg//		Execute "FFWaveInput()"//	else//		Execute "StepVarChange()"//	endif//	SetDataFolder savDF//End////Proc FFWaveInput(waveinput)//	String waveinput//	Prompt waveinput, "Select wave to insert:", popup Wavelist("*_DAC",";","")+Wavelist("*_TTL",";","")//	String waveoutput//	sprintf waveoutput, "ffwave%d", ffseg//	if (deltax($waveinput)!=deltax(Step5DAC))//		CheckBox ff_2 win=FiveSegBuilder, value=0//		Abort "Sample Interval Mismatch"//	else//		Duplicate /O $waveinput $waveoutput//		StepVarChange()//	endif//EndProc StepVarChange()	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl		//WAVE duration, amplitude, Step5DAC	//NVAR sintpb		Variable i, first, last, totaldur, firstp, lastp	String ffstr, notestr	Vars2Wave("stepdur","duration",5)	Vars2Wave("stepamp","amplitude",5)	PauseUpdate	totaldur=0	i=0	do		sprintf ffstr, "ff_%d", i		ControlInfo $ffstr		if (V_value>0)			sprintf ffstr, "ffwave%d", i			duration[i]=numpnts($ffstr)*deltax($ffstr)			//print duration[i]			Wave2Vars("duration","stepdur",5)		endif		totaldur+=duration[i]		i+=1	while(i<5)	print totaldur, sintpb	Redimension /N=(totaldur/sintpb) Step5DAC	Setscale /P x, 0, sintpb, "ms", Step5DAC	Note /K Step5DAC	ReplaceStringByKeyInWaveNote(Step5DAC,"WAVETYPE","step5dac")	ReplaceStringByKeyInWaveNote(Step5DAC,"TIME",time())	ReplaceStringByKeyInWaveNote(Step5DAC,"STEP",num2str(amplitude[1]))	first=0	i=0	do		last=first+duration[i]		sprintf ffstr, "ff_%d", i		ControlInfo $ffstr		if (V_value<1)			Step5DAC(first,last)=amplitude[i]		else			sprintf ffstr, "ffwave%d", i			amplitude[i]=0			firstp=x2pnt(Step5DAC, first)			lastp=x2pnt(Step5DAC, last)			Step5DAC[firstp,lastp]=$ffstr[p-firstp]			Wave2Vars("amplitude","stepamp",5)		endif		first=last+sintpb		sprintf notestr, "AMP%d", i		ReplaceStringByKeyInWaveNote(Step5DAC,notestr,num2str(amplitude[i]))		sprintf notestr, "DUR%d", i		ReplaceStringByKeyInWaveNote(Step5DAC,notestr,num2str(duration[i]))		i+=1	while(i<5)	ResumeUpdate	Duplicate /O Step5DAC NewDAC		SetDataFolder savDFEndFunction EditFiveSegWave(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl	String showstr	sprintf showstr, "ShowFiveSegWave(\"%s\")", popStr	Execute showstr	SetDataFolder savDFEndProc ShowFiveSegWave(popstr)	String popstr	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl	String keyword, keyval	Variable i	if (cmpstr(popstr,"_New_")==0)		stepdur0=10; stepdur1=10; stepdur2=10; stepdur3=10; stepdur4=10		stepamp1=10; stepamp3=10; sintpb=0.01		StepVarChange()	else		keyval=StringByKeyInWaveNote($popstr,"WAVETYPE")		if (cmpstr(keyval,"step5dac")==0)			sintpb=deltax($popstr)			do				sprintf keyword, "DUR%d", i				duration[i]=NumberByKeyInWaveNote($popstr,keyword)				sprintf keyword, "AMP%d", i				amplitude[i]=NumberByKeyInWaveNote($popstr,keyword)				i+=1			while(i<5)			Wave2Vars("duration", "stepdur", 5)			Wave2Vars("amplitude", "stepamp", 5)			StepVarChange()		else			Abort("This is not a five segment wave; choose another")		endif	endif	SetDataFolder savDFEndFunction TrainButtonProc(ctrlName) : ButtonControl	String ctrlName	LaunchTrainBuilder()EndFunction LaunchTrainBuilder()	if (wintype("TrainBuilder")<1)		Execute "TrainVarChange()"		Execute "TrainBuilder()"	else		DoWindow /F TrainBuilder	endifEndFunction TrainVarProc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	Execute "TrainVarChange()"EndProc TrainVarChange()	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl	Variable i, j, first, last, totaldur	String notestr	traindur1=(trainnum/trainfreq)*1000	Vars2Wave("traindur","duration",3)	PauseUpdate	totaldur=0	i=0	do		totaldur+=duration[i]		i+=1	while(i<3)	Redimension /N=(totaldur/sintpb) TrainDAC	Setscale /P x, 0, sintpb, "ms", TrainDAC	Note /K TrainDAC	ReplaceStringByKeyInWaveNote(TrainDAC,"WAVETYPE","traindac")	ReplaceStringByKeyInWaveNote(TrainDAC,"TIME",time())	TrainDAC=trainbase	first=0	i=0	do		if (i==1)			j=0			do				last=first+traindur				TrainDAC(first,last)=trainbase+trainamp				first+=1000/trainfreq+sintpb				j+=1			while(j<trainnum)		else			last=first+duration[i]			TrainDAC(first,last)=trainbase		endif		first=last+sintpb		sprintf notestr, "TRAINDUR%d", i		ReplaceStringByKeyInWaveNote(TrainDAC,notestr, num2str(duration[i]))		i+=1	while(i<3)	ReplaceStringByKeyInWaveNote(TrainDAC,"TRAINNUM", num2str(trainnum))	ReplaceStringByKeyInWaveNote(TrainDAC,"TRAINFREQ", num2str(trainfreq))	ReplaceStringByKeyInWaveNote(TrainDAC,"TRAINBASE", num2str(trainbase))	ReplaceStringByKeyInWaveNote(TrainDAC,"TRAINAMP", num2str(trainamp))	ReplaceStringByKeyInWaveNote(TrainDAC,"TRAINUPDUR", num2str(traindur))	ResumeUpdate	Duplicate /O TrainDAC NewDAC	SetDataFolder savDFEndFunction EditTrainWave(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	String showstr	sprintf showstr, "ShowTrainWave(\"%s\")", popStr	Execute showstrEndProc ShowTrainWave(popstr)	String popstr	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl	String keyword, keyval	Variable i	if (cmpstr(popstr,"_New_")==0)		traindur0=10; traindur1=10; traindur2=10; trainnum=10		trainfreq=10; trainamp=10; trainbase=0; traindur=2; sintpb=0.01		TrainVarChange()	else		keyval=StringByKeyInWaveNote($popstr, "WAVETYPE")		if (cmpstr(keyval,"traindac")==0)			sintpb=deltax($popstr)			do				sprintf keyword, "TRAINDUR%d", i				duration[i]=NumberByKeyInWaveNote($popstr,keyword)				i+=1			while(i<3)			Wave2Vars("duration", "traindur", 3)			sprintf keyword, "TRAINNUM"			trainnum=NumberByKeyInWaveNote($popstr,keyword)			sprintf keyword, "TRAINFREQ"			trainfreq=NumberByKeyInWaveNote($popstr,keyword)			sprintf keyword, "TRAINAMP"			trainamp=NumberByKeyInWaveNote($popstr,keyword)			sprintf keyword, "TRAINBASE"			trainbase=NumberByKeyInWaveNote($popstr,keyword)			sprintf keyword, "TRAINUPDUR"			traindur=NumberByKeyInWaveNote($popstr,keyword)			TrainVarChange()		else			Abort("This is not a train wave; choose another")		endif	endif	SetDataFolder savDFEndFunction RampButtonProc(ctrlName) : ButtonControl	String ctrlName	LaunchRampBuilder()EndFunction LaunchRampBuilder()	if (wintype("RampBuilder")<1)		Execute "RampVarChange()"		Execute "RampBuilder()"	else		DoWindow /F RampBuilder	endifEndFunction RampVarProc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	Execute "RampVarChange()"EndProc RampVarChange()	String savDF= GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl:	Variable i, j, first, last, totaldur, slope	String notestr	Vars2Wave("rampdur","duration",3)	Vars2Wave("rampamp","amplitude",3)//	amplitude[0]=amplitude[1]//	rampamp0=rampamp1	PauseUpdate	totaldur=0	i=1	do		totaldur+=duration[i]		i+=1	while(i<5)	Redimension /N=(totaldur/sintpb) RampDAC	Setscale /P x, 0, sintpb, "ms", RampDAC	Note /K RampDAC	ReplaceStringByKeyInWaveNote(RampDAC,"WAVETYPE","rampdac")	ReplaceStringByKeyInWaveNote(RampDAC,"TIME",time())	slope=(rampamp3-rampamp1)/rampdur2	first=0	i=1	do		if (i==2)			last=first+rampdur2			RampDAC(first,last)=rampamp1+slope*(x-rampdur1)		else			last=first+duration[i]			RampDAC(first,last)=amplitude[i]		endif		first=last+sintpb		sprintf notestr, "RAMPDUR%d", i		ReplaceStringByKeyInWaveNote(RampDAC,notestr, num2str(duration[i]))		sprintf notestr, "RAMPAMP%d", i		ReplaceStringByKeyInWaveNote(RampDAC,notestr, num2str(amplitude[i]))		i+=1	while(i<5)	ResumeUpdate	Duplicate /O RampDAC NewDAC	SetDataFolder savDFEndFunction EditRampWave(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	String showstr	sprintf showstr, "ShowRampWave(\"%s\")", popStr	Execute showstrEndProc ShowRampWave(popstr)	String popstr	String keyword, keyval	Variable i	if (cmpstr(popstr,"_New_")==0)		rampdur0=10; rampdur1=50; rampdur2=10		rampamp1=-10; rampamp2=10; sintpb=0.01		RampVarChange()	else		keyval=StringByKeyInWaveNote("WAVETYPE",$popstr)		if (cmpstr(keyval,"rampdac")==0)			sintpb=deltax($popstr)			do				sprintf keyword, "RAMPDUR%d", i				duration[i]=NumberByKeyInWaveNote($popstr,keyword)				sprintf keyword, "RAMPAMP%d", i				amplitude[i]=NumberByKeyInWaveNote($popstr,keyword)				i+=1			while(i<3)			Wave2Vars("duration", "rampdur", 3)			Wave2Vars("amplitude", "rampamp", 3)			RampVarChange()		else			Abort("This is not a ramp wave; choose another")		endif	endifEndFunction PSCButtonProc(ctrlName) : ButtonControl	String ctrlName	LaunchPSCBuilder()EndFunction LaunchPSCBuilder()	if (wintype("PSCBuilder")<1)		Execute "PSCVarChange()"		Execute "PSCBuilder()"	else		DoWindow /F PSCBuilder	endifEndFunction PSCVarProc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	Execute "PSCVarChange()"EndProc PSCVarChange()	Variable i, j, first, last, totaldur, max, scale, rise, decay1, decay2, err	String notestr, savDF	savDF=GetDataFolder(1)	SetDataFolder "root:DP_DigitizerControl"	Vars2Wave("pscdur","duration",3)	PauseUpdate	totaldur=0	i=0	do		totaldur+=duration[i]		i+=1	while(i<3)	Redimension /N=(totaldur/sintpb) PSCDAC	Setscale /P x, 0, sintpb, "ms", PSCDAC	Note /K PSCDAC	ReplaceStringByKeyInWaveNote(PSCDAC,"WAVETYPE","pscdac")	ReplaceStringByKeyInWaveNote(PSCDAC,"TIME",time())	ReplaceStringByKeyInWaveNote(PSCDAC,"PSCAMP",num2str(pscamp))	ReplaceStringByKeyInWaveNote(PSCDAC,"PSCTAUR",num2str(psctaur))	ReplaceStringByKeyInWaveNote(PSCDAC,"PSCTAUD1",num2str(psctaud1))	ReplaceStringByKeyInWaveNote(PSCDAC,"PSCTAUD2",num2str(psctaud2))	ReplaceStringByKeyInWaveNote(PSCDAC,"WTTD2",num2str(wttd2))	scale=1.37		// correct value is unique for each psc wave; adjusted in loop below	first=0	i=0	do		if (i==1)			last=first+pscdur1			PSCDAC(first,last)=pscamp*scale*-exp((pscdur0-x)/psctaur)			PSCDAC(first,last)+=(1-wttd2)*pscamp*scale*exp((pscdur0-x)/psctaud1)			PSCDAC(first,last)+=wttd2*pscamp*scale*exp((pscdur0-x)/psctaud2)			do				Wavestats /Q/R=(first,last) PSCDAC				if (abs(V_min)<V_max)					err=(V_max-pscamp)/pscamp				else					err=(V_min-pscamp)/pscamp				endif				PSCDAC=PSCDAC*(1-err)			while(abs(err)>0.001)		else			last=first+duration[i]			PSCDAC(first,last)=0		endif		first=last+sintpb		sprintf notestr, "PSCDUR%d", i		ReplaceStringByKeyInWaveNote(PSCDAC,notestr,num2str(duration[i]))		i+=1	while(i<3)	ResumeUpdate	Duplicate /O PSCDAC NewDAC	SetDataFolder savDFEndFunction EditPSCWave(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	String showstr	sprintf showstr, "ShowPSCWave(\"%s\")", popStr	Execute showstrEndProc ShowPSCWave(popstr)	String popstr	String keyword, keyval, savDF	Variable i	savDF=GetDataFolder(1)	SetDataFolder "DP_DigitizerControl"	if (cmpstr(popstr,"_New_")==0)		pscdur0=10; pscdur1=50; pscdur2=10; pscamp=10		psctaur=0.2; psctaud1=2; psctaud2=10; wttd2=0.5; sintpb=0.01		PSCVarChange()	else		keyval=StringByKeyInWaveNote("WAVETYPE", $popstr)		if (cmpstr(keyval,"pscdac")==0)			pscamp=NumberByKeyInWaveNote($popstr,"PSCAMP")			psctaur=NumberByKeyInWaveNote($popstr,"PSCTAUR")			psctaud1=NumberByKeyInWaveNote($popstr,"PSCTAUD1")			psctaud2=NumberByKeyInWaveNote($popstr,"PSCTAUD2")			wttd2=NumberByKeyInWaveNote($popstr,"WTTD2")			sintpb=deltax($popstr)			do				sprintf keyword, "PSCDUR%d", i				duration[i]=NumberByKeyInWaveNote($popstr,keyword)				i+=1			while(i<3)			Wave2Vars("duration", "pscdur", 3)			PSCVarChange()		else			Abort("This is not a PSC wave; choose another")		endif	endif	SetDataFolder savDFEndFunction SineButtonProc(ctrlName) : ButtonControl	String ctrlName	LaunchSineBuilder()EndFunction LaunchSineBuilder()	if (wintype("SineBuilder")<1)		Execute "SineVarChange()"		Execute "SineBuilder()"	else		DoWindow /F SineBuilder	endifEndFunction SineVarProc(ctrlName,varNum,varStr,varName) : SetVariableControl	String ctrlName	Variable varNum	String varStr	String varName	Execute "SineVarChange()"EndProc SineVarChange()	Variable i, j, first, last, totaldur, max, scale, rise, decay1, decay2, err	String notestr	String savDF	savDF=GetDataFolder(1)	SetDataFolder "root:DP_DigitizerControl"	Vars2Wave("sinedur","duration",3)	PauseUpdate	totaldur=0	i=0	do		totaldur+=duration[i]		i+=1	while(i<3)	Redimension /N=(totaldur/sintpb) SineDAC	Setscale /P x, 0, sintpb, "ms", SineDAC	Note /K SineDAC	ReplaceStringByKeyInWaveNote(SineDAC,"WAVETYPE","sinedac")	ReplaceStringByKeyInWaveNote(SineDAC,"TIME",time())	ReplaceStringByKeyInWaveNote(SineDAC,"SINEAMP",num2str(sineamp))	ReplaceStringByKeyInWaveNote(SineDAC,"SINEFREQ",num2str(sinefreq))	scale=1.37		// correct value is unique for each psc wave; there is a way to calculate this, but I forget	first=0	i=0	do		last=first+duration[i]		if (i==1)			SineDAC(first,last)=sineamp*sin(sinefreq*2*PI*(x-sinedur0)/1000)		else			SineDAC(first,last)=0		endif		first=last+sintpb		sprintf notestr, "SINEDUR%d", i		ReplaceStringByKeyInWaveNote(SineDAC,notestr,num2str(duration[i]))		i+=1	while(i<3)	ResumeUpdate	Duplicate /O SineDAC NewDAC	SetDataFolder savDFEndFunction EditSineWave(ctrlName,popNum,popStr) : PopupMenuControl	String ctrlName	Variable popNum	String popStr	String showstr	sprintf showstr, "ShowSineWave(\"%s\")", popStr	Execute showstrEndProc ShowSineWave(popstr)	String popstr	String keyword, keyval	Variable i	if (cmpstr(popstr,"_New_")==0)		sinedur0=10; sinedur1=50; sinedur2=10; sineamp=10; sinefreq=100; sintpb=0.01		SineVarChange()	else		keyval=StringByKeyInWaveNote("WAVETYPE",$popstr)		if (cmpstr(keyval,"sinedac")==0)			sineamp=NumberByKeyInWaveNote($popstr,"SINEAMP")			sinefreq=NumberByKeyInWaveNote($popstr,"SINEFREQ")			sintpb=deltax($popstr)			do				sprintf keyword, "SINEDUR%d", i				duration[i]=NumberByKeyInWaveNote($popstr,keyword)				i+=1			while(i<3)			Wave2Vars("duration", "sinedur", 3)			SineVarChange()		else			Abort("This is not a sine wave; choose another")		endif	endifEndFunction ViewDACButtonProc(ctrlName) : ButtonControl	String ctrlName	Execute "DACViewer()"End//Function HandleViewDacPopupSelection(ctrlName,itemNum,itemStr) : PopupMenuControl//	String ctrlName//	Variable itemNum//	String itemStr////	// Save current data folder, set to one we want.//	String savedFolderName= GetDataFolder(1)//	SetDataFolder root:DP_DigitizerControl://	//	// Remove the current trace, put in the new one.//	RemoveFromGraph /Z $"#0"//	if ( cmpstr(itemStr,"(none)")!=0 )//		AppendToGraph $itemStr//		ModifyGraph grid(left)=1  // put the grid back//	endif//	//	// Restore the original data folder.//	SetDataFolder savedFolderName//End//Function ResetAxesProc(ctrlName,varNum,varStr,varName) : SetVariableControl//	String ctrlName//	Variable varNum//	String varStr//	String varName//	RescaleTopAxes()//End//Function CursorsCheckProc(ctrlName,checked) : CheckBoxControl//	String ctrlName//	Variable checked//	SVAR thiswave=thiswave//	PlaceCursors(thiswave)//End//// Remove a list of waves from the top graph//Function RemoveWaves(list,graph)//	String list, graph//	String theWave//	Variable index=0//	DoWindow /F $graph//	do//		theWave=GetStrFromList(list,index,";")//		if (strlen(theWave)==0)//			break//		endif//		RemoveFromGraph $theWave//		index+=1//	while(1)	//  loop until break above//End