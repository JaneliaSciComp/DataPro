//	DataPro//	DAC/ADC macros for use with Igor Pro and the ITC-16 or ITC-18//	Nelson Spruston//	Northwestern University//	project began 10/27/1998#pragma rtGlobals=1		// Use modern global access method.Function /S GetNumADCChannelsInUse()	// Computes the DAC sequence string needed by the ITC functions, given the model state.	//  Note, however, that this is the RAW sequence string.  The raw DAC sequence must be reconciled with	// the raw ADC sequence to produce the final DAC and ADC seqeuences.	// Change to the ADCDACcontrol data folder	String savDF=GetDataFolder(1)	NewDataFolder /O/S root:DP_ADCDACcontrol	WAVE dacon, ttlon	// boolean waves that say which DAC, TTL channels are on	// Build up the strings that the ITC functions use to sequence the	// inputs and outputs, by probing the view state	String dacSequence=""	Variable i	for (i=0; i<4; i+=1)		if (dacon[i]>0)			dacSequence+=num2str(i)		endif	endfor	for (i=0; i<4; i+=1)		if (ttlon[i]>0)			dacSequence+="D"			break		endif	endfor		// Restore the original DF	SetDataFolder savDF	return dacSequence	EndFunction /S GetRawDACSequence()	// Computes the DAC sequence string needed by the ITC functions, given the model state.	//  Note, however, that this is the RAW sequence string.  The raw DAC sequence must be reconciled with	// the raw ADC sequence to produce the final DAC and ADC seqeuences.	// Change to the ADCDACcontrol data folder	String savDF=GetDataFolder(1)	NewDataFolder /O/S root:DP_ADCDACcontrol	WAVE dacon, ttlon	// boolean waves that say which DAC, TTL channels are on	// Build up the strings that the ITC functions use to sequence the	// inputs and outputs, by probing the view state	String dacSequence=""	Variable i	for (i=0; i<4; i+=1)		if (dacon[i]>0)			dacSequence+=num2str(i)		endif	endfor	for (i=0; i<4; i+=1)		if (ttlon[i]>0)			dacSequence+="D"			break		endif	endfor		// Restore the original DF	SetDataFolder savDF	return dacSequence	EndFunction /S GetRawADCSequence()	// Computes the ADC sequence string needed by the ITC functions, given the model state	// Note, however, that this is the RAW sequence string.  The raw DAC sequence must be reconciled with	// the raw ADC sequence to produce the final DAC and ADC seqeuences.	// Change to the ADCDACcontrol data folder	String savDF=GetDataFolder(1)	NewDataFolder /O/S root:DP_ADCDACcontrol	// Declare the DF vars we need	WAVE adcon	// Build up the strings that the ITC functions use to sequence the	// inputs and outputs		String adcSequence=""	Variable i	for (i=0; i<8; i+=1)		if (adcon[i]>0)			adcSequence+=num2str(i)		endif	endfor	// Restore the original DF	SetDataFolder savDF	return adcSequence	EndFunction /S ReconcileADCSequence(adcSequenceRaw,dacSequenceRaw)	// Reconciles the raw ADC sequence with the given raw DAC sequence, returning an	// ADC sequence which consists of some number of repeats of the raw ADC sequence.	String adcSequenceRaw,dacSequenceRaw	Variable nCommon=lcmLength(dacSequenceRaw,adcSequenceRaw)  // the reconciled sequences must be the same length	Variable nRepeats=nCommon/strlen(adcSequenceRaw)	String adcSequence=RepeatString(adcSequenceRaw,nRepeats)			return adcSequence	EndFunction /S ReconcileDACSequence(dacSequenceRaw,adcSequenceRaw)	// Reconciles the raw DAC sequence with the given raw ADC sequence, returning a	// DAC sequence which consists of some number of repeats of the raw DAC sequence.	String adcSequenceRaw,dacSequenceRaw	Variable nCommon=lcmLength(dacSequenceRaw,adcSequenceRaw)  // the reconciled sequences must be the same length	Variable nRepeats=nCommon/strlen(dacSequenceRaw)	String dacSequence=RepeatString(dacSequenceRaw,nRepeats)			return dacSequenceEnd