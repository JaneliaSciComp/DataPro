//	DataPro//	DAC/ADC macros for use with Igor Pro and the ITC-16 or ITC-18//	Nelson Spruston//	Northwestern University//	project began 10/27/1998//	last updated 1/12/2000Function NewTestPulseWindow() : Graph	// Save the data folder, change it	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl		// Kill any pre-existing window		if (GraphExists("TestPulseWindow"))		DoWindow /K TestPulseWindow	endif		// Create the graph window	Display /W=(760,450,760+300,450+300) /N=TestPulseWindow /K=1 as "Test Pulse"//	ModifyGraph grid(left)=1//	ModifyGraph tickUnit(bottom)=1//	NVAR testadc//	WAVE adcType//	SVAR unitsCurrent, unitsVoltage//	String yLabel//	if (adcType[testadc]==1)//		yLabel=sprintf1s("Current (%s)",unitsCurrent)//	else//		yLabel=sprintf1s("Voltage (%s)",unitsVoltage)//	endif//	Label left sprintf1s("\\F'Helvetica'\\Z12\\f01%s",yLabel)//	Label bottom "\\F'Helvetica'\\Z12\\f01Time (ms)"//	SetAxis left -6.75,7.5		// Draw the top "panel"	ControlBar /T /W=TestPulseWindow 80	// Control widgets for the test pulse		NVAR testPulseTTLOutput	Button startButton,pos={18,10},size={80,20},proc=TPStartButtonProc,title="Start"	TitleBox proTipTitleBox,pos={10,30+4},frame=0,title="(hit ESC key to stop)",disable=1	SetVariable test_dac,pos={110+30,10},size={70,1},title="DAC #"	SetVariable test_dac,limits={0,3,1},value= root:DP_DigitizerControl:testdac	SetVariable test_adc,pos={110+30,30},size={70,1},title="ADC #"	SetVariable test_adc,limits={0,7,1},value= root:DP_DigitizerControl:testadc	SetVariable testPulseAmplitudeSetVariable,pos={200+30,10},size={100,1},title="amplitude"	SetVariable testPulseAmplitudeSetVariable,limits={-1000,1000,1},value= root:DP_DigitizerControl:tpamp	SetVariable tpdur,pos={200+30,30},size={100,1},title="duration  "	SetVariable tpdur,limits={1,1000,1},value= root:DP_DigitizerControl:tpdur	TitleBox msTitleBox,pos={300+30+4,30+1},frame=0,title="ms"		NVAR testPulseDoBaselineSubtraction	CheckBox testPulseBaseSubCheckbox,pos={110+30,56},size={58,14},title="Base Sub"	Checkbox testPulseBaseSubCheckbox,value=testPulseDoBaselineSubtraction	Checkbox testPulseBaseSubCheckbox,proc=TestPulseBaseSubCheckboxUsed	CheckBox ttlOutputCheckbox,pos={200+30+20,56},size={58,14},title="TTL Output"	CheckBox ttlOutputCheckbox,proc=ttlOutputCheckboxUsed,value=testPulseTTLOutput	SetVariable ttlOutChannelSetVariable,pos={280+30+20,56-1},size={44,1},title="#"	SetVariable ttlOutChannelSetVariable,limits={0,3,1},value= root:DP_DigitizerControl:testPulseTTLOutChannel	SetVariable ttlOutChannelSetVariable,disable=2-2*testPulseTTLOutput	// Draw the bottom "panel"	ControlBar /B /W=TestPulseWindow 30	// Widgets for showing the seal resistance	ValDisplay RSealValDisplay,pos={236,380},size={120,17},fSize=12,format="%10.3f"	ValDisplay RSealValDisplay,limits={0,0,0},barmisc={0,1000},value= _NUM:nan	ValDisplay RSealValDisplay,title="Resistance:"	TitleBox GOhmTitleBox,pos={236+126,380+1},frame=0,title="GOhm"		// Restore the original DF	SetDataFolder savDFEndFunction TPStartButtonProc(ctrlName) : ButtonControl	String ctrlName	DeliverTestPulses()EndFunction TestPulseBaseSubCheckboxUsed(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl	NVAR testPulseDoBaselineSubtraction	testPulseDoBaselineSubtraction=checked		SetDataFolder savDFEndFunction ttlOutputCheckboxUsed(ctrlName,checked) : CheckBoxControl	String ctrlName	Variable checked	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl	NVAR testPulseTTLOutput	testPulseTTLOutput=checked	SetVariable ttlOutChannelSetVariable,win=TestPulseWindow,disable=2-2*testPulseTTLOutput		SetDataFolder savDFEndFunction DeliverTestPulses()	// Deliver repeated test pulses, acquire response, display.	// Set DF	String savDF=GetDataFolder(1)	SetDataFolder root:DP_DigitizerControl	// DF vars we need access to	NVAR testdac	// index of DAC channel to use for test pulse	NVAR testadc	// index of ADC channel to use for test pulse	//NVAR RSeal	NVAR tpamp, tpdur	NVAR sinttp	WAVE adcType	WAVE dacType	SVAR unitsCurrent	SVAR unitsVoltage	//WAVE dacMultiplier		//Variable testtrigger=1			//Variable testPulseTTLOutChannel=2			NVAR testPulseTTLOutput		// boolean, true iff we're to also have a TTL output go high when pulsing	NVAR testPulseTTLOutChannel		// index of the TTL output channel to use	NVAR testPulseDoBaselineSubtraction	// Is TestPulse_ADC currently plotted in the graph?	String traceList=TraceNameList("TestPulseWindow",";",3)  // 3 means all traces	Variable nTraces=ItemsInList(traceList)	Variable waveInGraph=(nTraces>0)		// assume that if there's a wave in there, it's TestPulse_ADC	// Build the test pulse wave	Wave TestPulse_TTL=SimplePulseBoolean(sinttp,0.5*tpdur,tpdur,0.5*tpdur)		// free wave	Variable nScans=numpnts(TestPulse_TTL)	Make /FREE /N=(nScans) TestPulse_DAC	TestPulse_DAC=tpamp*TestPulse_TTL	// Create the wave we'll display, which is all-zeros for now	Make /O /N=(nScans) TestPulse_ADC	Setscale /P x, 0, sinttp, "ms", TestPulse_ADC//	// Create the test pulse display if it doesn't exist//	if (!GraphExists("TestPulseGraph"))//		CreateTestPulseWindow()//	endif		// Bring the test pulse panel to the front	DoWindow /F TestPulseWindow		// Multiplex the TTL wave, if called for	if (testPulseTTLOutput)		//Duplicate /FREE /O TestPulse_DAC TestTrig_TTL		//TestTrig_TTL=0		//TestTrig_TTL[1,11]=2^testPulseTTLOutChannel		//Wave TestPulse_TTL=GetTestPulseBoolean()  // free wave		TestPulse_TTL=(2^testPulseTTLOutChannel)*TestPulse_TTL	// multiplexing	endif		// Build FIFOout for the test pulse	Variable outgain=ComputeOutputGain(testdac)	Variable ingain=ComputeInputGain(testadc)	String daseq=num2str(testdac)	String adseq=num2str(testadc)	if (testPulseTTLOutput)		daseq+="D"		adseq+=num2str(testadc)		Make /FREE /N=(nScans*2) FIFOout		Setscale /P x, 0, sinttp/2, "ms", FIFOout		//FIFOout[0,;2]=TestPulse_DAC[p/2]*outgain*dacMultiplier[testdac]		FIFOout[0,;2]=TestPulse_DAC[p/2]*outgain		FIFOout[1,;2]=TestPulse_TTL[p/2]	else		//Duplicate /FREE TestPulse_DAC FIFOout			Make /FREE /N=(nScans) FIFOout		Setscale /P x, 0, sinttp, "ms", FIFOout		//Duplicate /FREE TestPulse_DAC FIFOout			//FIFOout=TestPulse_DAC*outgain*dacMultiplier[testdac]		FIFOout=TestPulse_DAC*outgain	endif		// Specify the time windows for measuring the baseline and the pulse amplitude	Variable totalDuration=2*tpdur	Variable t0Base=0	Variable tfBase=1/8*totalDuration	Variable t0Pulse=5/8*totalDuration	Variable tfPulse=6/8*totalDuration		// Get data and plot it in a loop	TitleBox proTipTitleBox,win=TestPulseWindow,disable=0		// tell the user how to break out of the loop	Variable base, pulse	do		Wave FIFOin=SampleData(adseq,daseq,FIFOout)		if (testPulseTTLOutput)			TestPulse_ADC=FIFOin[2*p]*ingain		else			TestPulse_ADC=FIFOin*ingain		endif		KillWaves FIFOin		// Don't need FIFOin anymore		if (testPulseDoBaselineSubtraction)			Wavestats /Q/R=[5,45] TestPulse_ADC			TestPulse_ADC-=V_avg		endif		// Put TestPulse_ADC into the graph		if (~waveInGraph)			AppendToGraph /W=TestPulseWindow TestPulse_ADC			// set display range			Variable miny, maxy			Wavestats /Q TestPulse_ADC			miny=1.2*V_min			Wavestats /Q TestPulse_ADC			maxy=1.2*V_max			miny-=maxy/10			if (miny>-0.2)				miny=-0.2			endif			if (maxy<0.2)				maxy=0.2			endif			Setaxis left, miny, maxy			ModifyGraph grid(left)=1			ModifyGraph tickUnit(bottom)=1			Label bottom "\\F'Helvetica'\\Z12\\f01Time (ms)"			if (adcType[testadc]==1)				Label left sprintf1s("\\F'Helvetica'\\Z12\\f01Current (%s)",unitsCurrent)			else				Label left sprintf1s("\\F'Helvetica'\\Z12\\f01Voltage (%s)",unitsVoltage)			endif			// note that there is now a wave in the graph			waveInGraph=1		endif		// Calculate the seal resistance		base=mean(TestPulse_ADC,t0Base,tfBase)		pulse=mean(TestPulse_ADC,t0Pulse,tfPulse)		Variable RSeal		if (adcType[testadc]==1 && dacType[testdac]==2)			// ADC channel is a current channel, DAC channel is a voltage channel			RSeal=tpamp/(pulse-base)		elseif (adcType[testadc]==2 && dacType[testdac]==1)			// output channel is a voltage channel			RSeal=(pulse-base)/tpamp		else			Printf "ADC and DAC channel for test pulse are of same type, therefore the 'resistance' is unitless!\r"			RSeal=nan		endif		ValDisplay RSealValDisplay,win=TestPulseWindow,value= _NUM:RSeal		DoUpdate	while (!EscapeKeyWasPressed())	TitleBox proTipTitleBox,win=TestPulseWindow,disable=1		// hide the pro tip	//// Kill the graph	//DoWindow /K TestPulseGraph		// Bring the test pulse panel forward now that we're done	//DoWindow /F TestPulseWindow		// Kill the ADC wave, so it's not hanging around in the DF after we exit	//KillWaves TestPulse_ADC		// Restore the original DF	SetDataFolder savDFEnd